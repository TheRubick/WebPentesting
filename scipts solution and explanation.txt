##xss-game.appspot.com##

This file we will explain the idea of the solution and the volunerability in each level.

Notes:
- The solutions here arenot the only valid one but it is sample of many possible solutions.

- Try to test the input by typing some characters like : "> to check if there is a filter or not. 

- Visit this website if you are stuck -> https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting.

level one:
"xss reflection" which is injecting a payload to the given search bar with an alert script , solution -> <script>alert(1)</script>

level two:
"xss stored" which is injecting a payload by submitting a comment but we should take in consideration that the comment section has a filter which prevents scripts so we would implement an event associated with an HTML tag , solution -> <button onclick ="alert(1)">click here</button>

level three:
"xss DOM" which is injecting payload in one of the elements in the page(frame) and this element is the frame(page) URL as they mentioned in the description of the level, if we checked the source code of the frame we would see the "html" variable which indicates the url parameter and in this statement we see the "num" parameter which indicates the number of the photo to be viewed, if we assigned the num to a single quote (') we would leave ".jpg'" as an attribute because the we have matched the single quote of the src i.e. '/static/level3/cloud' so we then would safely inject our payload ; full solution -> ' onerror="alert(1)"

level four:
The idea of this level is to teach you how could be volnurabilities in the context of the page by injecting a deciving payload to pass some restriction, if we viewed the source code of the timer loading page we would notice that the onload attribute takes a function called "startTimer" as it's value, but the way we could injecting payload is by submitting another function to the onload attribute so we would call the startTimer function and our payload which is the alert function , the solution is somehow similar to the evasion we did in the previous level and here is -> '); alert('1 to change the onload attribute value to be like : onload = "startTimer(''); alert('1');"

level five:
This level teaches us another technique to have an advantage over simple volnurabilities, if we noticed the next parameter in the URL we would notice that it could redirect us to some pages which may be insecure, so the solution of this level is by injecting a js payload which popout the alert message , solution : next=javascript:alert(1) in the URL , if you are stuck see some examples about how we could assign a js code to href HTML attribute.

level six:
The idea of this level as mentioned in the description is the volnurabilities of dynamically load JavaScript libraries , so we would upload our payload js code and load it in the website by using pastebin.com then taking the raw of the payload and type it in the URL, the URL of the payload would be sth like : https://pastebin.com/raw/5V9LR2Tu , but if we injected our payload a message response informs the deny of the operation because our URL payload contains "http" , if we viewed the source code we would find an if condition denies the load of any URL js code starts with "http" so we would remove the http or making the http in an upper case (capital) i.e. HTTP not HTTP and our payload would be : //pastebin.com/raw/5V9LR2Tu containing a simple code inside it which is alert(1)

i hope my explanation helps , thanks :D